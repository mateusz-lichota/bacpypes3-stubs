"""
This type stub file was generated by pyright.
"""

from typing import Callable, Optional, Tuple
from ..debugging import DebugContents, bacpypes_debugging
from ..pdu import IPv4Address, PCI, PDU, PDUData
from ..comm import Client, Server

"""
BACnet IPv4 Virtual Link Layer Protocol Data Units
"""
_debug = ...
_log = ...
pdu_types = ...
def register_bvlpdu_type(class_):
    ...

@bacpypes_debugging
class LPCI(PCI, DebugContents):
    """
    Link Layer Protocol Control Information
    """
    _debug: Callable[..., None]
    _debug_contents: Tuple[str, ...] = ...
    result = ...
    writeBroadcastDistributionTable = ...
    readBroadcastDistributionTable = ...
    readBroadcastDistributionTableAck = ...
    forwardedNPDU = ...
    registerForeignDevice = ...
    readForeignDeviceTable = ...
    readForeignDeviceTableAck = ...
    deleteForeignDeviceTableEntry = ...
    distributeBroadcastToNetwork = ...
    originalUnicastNPDU = ...
    originalBroadcastNPDU = ...
    bvlciType: int = ...
    bvlciFunction: int
    bvlciLength: int
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def update(self, bvlci: LPCI) -> None:
        ...
    
    def encode(self) -> PDU:
        """Encode the contents of the LPCI as a PDU."""
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPCI:
        """Decode the contents of the PDU and return a LPCI."""
        ...
    
    def lpci_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@bacpypes_debugging
class LPDU(LPCI, PDUData):
    """
    Link Layer Protocol Data Unit
    """
    _debug: Callable[..., None]
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...) -> dict:
        ...
    
    def dict_contents(self, use_dict=..., as_class=...) -> dict:
        """Return the contents of an object as a dict."""
        ...
    
    debug_contents = ...


@bacpypes_debugging
class BVLLCodec(Client[PDU], Server[LPDU]):
    _debug: Callable[..., None]
    def __init__(self, cid=..., sid=...) -> None:
        ...
    
    async def indication(self, lpdu: LPDU) -> None:
        ...
    
    async def confirmation(self, pdu: PDU) -> None:
        ...
    


@bacpypes_debugging
def key_value_contents(use_dict=..., as_class=..., key_values=...): # -> dict[Any, Any]:
    """
    Update the contents of a dictionary with the keys and values that
    are not None, and if the value as a dict_contents() function then
    call it for nested details.
    """
    ...

class FDTEntry(DebugContents):
    _debug_contents = ...
    fdAddress: IPv4Address
    fdTTL: int
    fdRemain: int
    def __init__(self) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        """Return true iff entries are identical."""
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class Result(LPDU, BaseException):
    _debug: Callable[..., None]
    _debug_contents: Tuple[str, ...] = ...
    pduType = ...
    def __init__(self, code: Optional[int] = ..., *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class WriteBroadcastDistributionTable(LPDU):
    _debug: Callable[..., None]
    _debug_contents = ...
    pduType = ...
    def __init__(self, bdt=..., *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class ReadBroadcastDistributionTable(LPDU):
    pduType = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class ReadBroadcastDistributionTableAck(LPDU):
    _debug: Callable[..., None]
    _debug_contents = ...
    pduType = ...
    def __init__(self, bdt=..., *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class ForwardedNPDU(LPDU):
    _debug: Callable[..., None]
    _debug_contents = ...
    pduType = ...
    def __init__(self, addr=..., *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class RegisterForeignDevice(LPDU):
    _debug: Callable[..., None]
    _debug_contents = ...
    pduType = ...
    def __init__(self, ttl=..., *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class ReadForeignDeviceTable(LPDU):
    pduType = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class ReadForeignDeviceTableAck(LPDU):
    _debug: Callable[..., None]
    _debug_contents = ...
    pduType = ...
    def __init__(self, fdt=..., *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class DeleteForeignDeviceTableEntry(LPDU):
    _debug: Callable[..., None]
    _debug_contents = ...
    pduType = ...
    def __init__(self, addr=..., *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class DistributeBroadcastToNetwork(LPDU):
    _debug: Callable[..., None]
    pduType = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class OriginalUnicastNPDU(LPDU):
    _debug: Callable[..., None]
    pduType = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


@register_bvlpdu_type
class OriginalBroadcastNPDU(LPDU):
    _debug: Callable[..., None]
    pduType = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def encode(self) -> PDU:
        ...
    
    @classmethod
    def decode(class_, pdu: PDU) -> LPDU:
        ...
    
    def lpdu_contents(self, use_dict=..., as_class=...): # -> dict[Any, Any]:
        """Return the contents of an object as a dict."""
        ...
    


