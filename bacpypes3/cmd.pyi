"""
This type stub file was generated by pyright.
"""

from typing import Any, Awaitable, Callable, List, Optional, Tuple
from bacpypes3.debugging import bacpypes_debugging
from bacpypes3.comm import Server
from bacpypes3.console import ConsolePDU

"""
Support for line-oriented command interpreters
"""
_debug = ...
_log = ...
@bacpypes_debugging
class CmdProfile:
    """
    Instances of this class are wrappers around the do_command() methods
    of a Cmd instance.
    """
    _debug: Callable[..., None]
    def __init__(self, cmd_fn: Callable[..., None]) -> None:
        ...
    
    def convert_arg(self, arg: str, raw_arg: str, arg_type: Any) -> Any:
        ...
    
    def __call__(self, args: List[str]) -> Tuple[Any, Any, Any]:
        ...
    


@bacpypes_debugging
class Cmd(Server[ConsolePDU]):
    """
    Simple example server that echos the downstream strings as uppercase
    upstream strings.

    Method defined using the prefix `do_` will be executable from the command line.
    Docstring of those functions will be included in the help message if you call

        help command

    Calling help, will output all the available functions and print out the docstring
    of the class itself.

    """
    _debug: Callable[..., None]
    def __init__(self, sid: Optional[str] = ...) -> None:
        ...
    
    async def indication(self, pdu: ConsolePDU) -> None:
        ...
    
    def do_help(self, cmd: str = ...) -> None:
        """
        usage: help [ cmd ]
        """
        ...
    
    def do_exit(self, status: int = ...) -> Awaitable[None]:
        """
        usage: exit [ status ]
        """
        ...
    


@bacpypes_debugging
class CmdDebugging:
    _debug: Callable[..., None]
    def do_loggers(self) -> None:
        """
        usage: loggers
        """
        ...
    
    def do_bugin(self, *loggers: str, color: Optional[int] = ...) -> None:
        """
        usage: bugin [LOGGER ...] [--color [int]]
        """
        ...
    
    def do_bugout(self, *loggers: str) -> None:
        """
        usage: bugout [LOGGER ...]
        """
        ...
    


