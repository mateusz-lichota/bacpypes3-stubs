"""
This type stub file was generated by pyright.
"""

import logging
from typing import Any, Callable, Dict, List, Optional, TextIO, Tuple, TypeVar, Union

"""
Debugging
"""
root_logger = ...
FuncType = Callable[..., Any]
F = TypeVar("F", bound=FuncType)
module_loggers: Dict[logging.Logger, Dict[str, Any]] = ...
def btox(data: Union[bytes, bytearray], sep: str = ...) -> str:
    """Return the hex encoding of a blob (byte string)."""
    ...

def xtob(data: str, sep: str = ...) -> bytes:
    """Interpret the hex encoding of a blob (byte string)."""
    ...

def ModuleLogger(globs: Dict[str, Any]) -> logging.Logger:
    """
    Create a module level logger.

    To debug a module, create a _debug variable in the module, then use the
    ModuleLogger function to create a "module level" logger.  When a handler
    is added to this logger or a child of this logger, the _debug variable will
    be incremented.

    All of the calls within functions or class methods within the module should
    first check to see if _debug is set to prevent calls to formatter objects
    that aren't necessary.
    """
    ...

_debug = ...
_log = ...
class DebugContents:
    """
    A mix-in class that adds a function for debugging the contents of an
    instance.  It assumes that the class has a _debug_contents tuple of
    property names.
    """
    _debug_contents: Tuple[str, ...]
    def debug_contents(self, indent: int = ..., file: TextIO = ..., _ids: Optional[List[Any]] = ...) -> None:
        """Debug the contents of an object."""
        ...
    


class LoggingFormatter(logging.Formatter):
    """
    A logging Formatter subclass that provides a specialized format routine
    and optionally wraps the output in escape codes for color.  This is used
    for console debugging when the --color option is provided.
    """
    color: Optional[int]
    def __init__(self, color: Optional[int] = ...) -> None:
        ...
    
    def format(self, record: logging.LogRecord) -> str:
        """
        This function extends the default format function by adding descriptions
        of the the contents of all of the arguments that are instances of
        DebugContents.
        """
        ...
    


def bacpypes_debugging(obj: F) -> F:
    """Decorator function that attaches a debugging logger to a class or function."""
    ...

