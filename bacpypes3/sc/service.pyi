"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import Any, Callable, Optional, Set, TYPE_CHECKING
from ..debugging import bacpypes_debugging
from ..comm import Server, ServiceAccessPoint
from ..pdu import PDU

"""
Secure Connect
"""
_debug = ...
_log = ...
if TYPE_CHECKING:
    WebSocketQueue = asyncio.Queue[PDU]
else:
    ...
@bacpypes_debugging
class WebSocketClient(Server[PDU]):
    """
    This generic WebSocket client attempts to establish and maintain a
    connection to a server.  It is subclassed for direct connect and hub
    connections.
    """
    _debug: Callable[..., None]
    _exception: Callable[..., None]
    uri: str
    kwargs: Any
    def __init__(self, switch: SCNodeSwitch, uri: str, **kwargs: Any) -> None:
        ...
    
    async def indication(self, pdu: PDU) -> None:
        ...
    
    async def websocket_loop(self) -> None:
        """The websocket_loop runs as a task opening and maintaining a
        connection to the server.  It waits for incoming messages and sends
        them up the stack, for downstream messages and sends them to the server,
        or for the stop event to be set.
        """
        ...
    
    async def close(self): # -> None:
        ...
    


@bacpypes_debugging
class SCDirectConnectClient(WebSocketClient):
    """
    This is the initiating side of a direct connection.
    """
    _debug: Callable[..., None]
    _exception: Callable[..., None]
    def __init__(self, switch: SCNodeSwitch, uri: str, **kwargs: Any) -> None:
        ...
    


@bacpypes_debugging
class SCHubClient(WebSocketClient):
    """
    This is the initiating side of a hub connection.
    """
    _debug: Callable[..., None]
    _exception: Callable[..., None]
    def __init__(self, switch: SCNodeSwitch, uri: str, **kwargs: Any) -> None:
        ...
    


@bacpypes_debugging
class WebSocketServer:
    _debug: Callable[..., None]
    _exception: Callable[..., None]
    def __init__(self, switch: SCNodeSwitch, websocket, path) -> None:
        ...
    
    async def indication(self, pdu: PDU) -> None:
        ...
    
    async def websocket_loop(self) -> None:
        """The websocket_loop runs as a task opening and maintaining a
        connection to the server.  It waits for incoming messages and sends
        them up the stack, for downstream messages and sends them to the server,
        or for the stop event to be set.
        """
        ...
    
    async def close(self): # -> None:
        ...
    


@bacpypes_debugging
class SCDirectConnectServer(WebSocketServer):
    """
    This is the listening side of a direct connection for a specific client.
    """
    ...


@bacpypes_debugging
class SCHubServer(WebSocketServer):
    """
    This is the listening side of a hub connection for a specific client.
    """
    ...


@bacpypes_debugging
class SCServiceAccessPoint(ServiceAccessPoint):
    """
    This Service Access Point interface is shared with both the direct connect
    and hub service access points and provides the registration list for the
    connect peers and hub clients.
    """
    _debug: Callable[..., None]
    connected_servers: Set[WebSocketServer]
    def __init__(self) -> None:
        ...
    
    async def register(self, server: WebSocketServer) -> None:
        ...
    
    async def unregister(self, server: WebSocketServer) -> None:
        ...
    


@bacpypes_debugging
class SCDirectConnectServiceAccessPoint(SCServiceAccessPoint):
    ...


@bacpypes_debugging
class SCHubServiceAccessPoint(SCServiceAccessPoint):
    ...


@bacpypes_debugging
class SCNodeSwitch(Server[PDU]):
    _debug: Callable[..., None]
    _exception: Callable[..., None]
    host: str
    port: int
    server_task: Optional[asyncio.Future]
    def __init__(self, host: str = ..., port: int = ..., dc_support: bool = ..., hub_support: bool = ...) -> None:
        ...
    
    async def dispatcher(self, websocket, path) -> None:
        ...
    
    async def indication(self, pdu: PDU) -> None:
        """
        Downstream messages from the network layer.
        """
        ...
    
    async def confirmation(self, pdu: PDU) -> None:
        """
        Upstream messages from one of the clients or servers.
        """
        ...
    
    def connect_to_device(self, uri: str) -> SCDirectConnectClient:
        """
        Initiate a connection to another device.
        """
        ...
    
    def connect_to_hub(self, uri: str) -> SCHubClient:
        """
        Initiate a connection to a hub.
        """
        ...
    
    async def close(self) -> None:
        """
        This should shutdown all of the clients and servers.
        """
        ...
    


