"""
This type stub file was generated by pyright.
"""

from typing import Any as _Any, Dict, List as _List
from ..debugging import bacpypes_debugging
from ..primitivedata import Atomic, TagList
from ..constructeddata import Any, ExtendedList, Sequence
from ..apdu import APDU
from _typeshed import ReadableBuffer

"""
Utility functions
"""
JSONDict = Dict[str, _Any]
_debug = ...
_log = ...
_bitstring_as_bits = ...
_bitstring_as_str = ...
_bitstring_as_list = ...
_octetstring_as_base64Binary = ...
_octetstring_as_hexBinary = ...

def null_encode(value):  # -> list[Any]:
    ...
def null_decode(value, class_): ...
def boolean_encode(value):  # -> bool:
    ...
def boolean_decode(value, class_): ...
def unsigned_encode(value):  # -> int:
    ...
def unsigned_decode(value, class_): ...
def integer_encode(value):  # -> int:
    ...
def integer_decode(value, class_): ...
def real_encode(value):  # -> float:
    ...
def real_decode(value, class_): ...
def double_encode(value):  # -> float:
    ...
def double_decode(value, class_): ...
def octetstring_encode(value: ReadableBuffer) -> str: ...
def octetstring_decode(value, class_):
    """
    This decoding function first attempts to decode the string content
    as base-64 or bin-hex to match the encoding function above, but
    has a backup for passing the value to the class, for example,
    IPv4OctetString is a subclass of OctetString that accepts IPv4 addresses.
    """
    ...

def characterstring_encode(value):  # -> str:
    ...
def characterstring_decode(value, class_): ...
def bitstring_encode(value):  # -> str | list[Any]:
    ...
def bitstring_decode(value, class_): ...
def enumerated_encode(value): ...
def enumerated_decode(value, class_): ...
def date_encode(value):  # -> str:
    ...
def date_decode(value, class_): ...
def time_encode(value):  # -> str:
    ...
def time_decode(value, class_): ...
def objectidentifier_encode(value):  # -> str:
    ...
def objectidentifier_decode(value, class_): ...
def atomic_encode(value) -> _Any: ...
def atomic_decode(literal, class_) -> Atomic: ...
def sequence_to_json(seq: Sequence) -> JSONDict:
    """Encode a sequence as a JSONDict."""
    ...

def json_to_sequence(json: JSONDict, seq_class: type) -> Sequence:
    """Decode a sequence from a graph."""
    ...

def extendedlist_to_json_list(xlist: ExtendedList) -> _List[_Any]:
    """Encode an extended list as an array."""
    ...

def json_list_to_extendedlist(
    json_list: _List[_Any], xlist_class: type
) -> ExtendedList:
    """Decode an extended list from a graph."""
    ...

def taglist_to_json_list(tag_list: TagList) -> _List[Dict[str, _Any]]:
    """ """
    ...

def json_list_to_taglist(json_list: _List[Dict[str, _Any]]) -> Any:
    """ """
    ...

def apdu_to_json(apdu: APDU) -> JSONDict:
    """ """
    ...

def json_to_apdu(json_blob: JSONDict) -> APDU:
    """ """
    ...
