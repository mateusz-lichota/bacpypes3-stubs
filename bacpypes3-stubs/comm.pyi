"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Generic, Optional, TypeVar, Union

"""
Client/Server Design Pattern
"""
T = TypeVar("T")
client_map: Dict[str, Client[Any]] = ...
server_map: Dict[str, Server[Any]] = ...
element_map: Dict[str, ApplicationServiceElement] = ...
service_map: Dict[str, ServiceAccessPoint] = ...
class ConfigurationError(ValueError):
    """
    This error is raised when there is a configuration problem such as
    bindings between layers or required parameters that are missing.
    """
    def __init__(self, *args: str) -> None:
        ...
    


class Client(Generic[T]):
    """
    A client is a communications object that makes requests by sending
    packets "downstream" to a server and responds to confirmation messages
    coming "upstream".
    """
    clientID: Optional[str]
    clientPeer: Optional[Server[T]]
    def __init__(self, cid: Optional[str] = ...) -> None:
        ...
    
    async def request(self, pdu: T) -> None:
        ...
    
    async def confirmation(self, pdu: T) -> None:
        ...
    


class Server(Generic[T]):
    """
    A server is a communications object that receives requests "downstream"
    via the indication() function) and sends responses back "upstream".
    """
    serverID: Optional[str]
    serverPeer: Optional[Client[T]]
    def __init__(self, sid: Optional[str] = ...) -> None:
        ...
    
    async def indication(self, pdu: T) -> None:
        ...
    
    async def response(self, pdu: T) -> None:
        ...
    


class ApplicationServiceElement:
    """
    An Application Service Element (ASE) is client is a communications object
    that makes requests to a Service Access Point by sending
    packets "downstream" (by calling request) and responds to confirmation
    messages coming "upstream".
    """
    elementID: Optional[str]
    elementService: Optional[ServiceAccessPoint]
    def __init__(self, *args, aseID: Optional[str] = ..., **kwargs) -> None:
        ...
    
    async def request(self, *args: Any) -> None:
        ...
    
    async def indication(self, *args: Any) -> None:
        ...
    
    async def response(self, *args: Any) -> None:
        ...
    
    async def confirmation(self, *args: Any) -> None:
        ...
    


class ServiceAccessPoint:
    """
    A server is a communications object that receives requests "downstream"
    via the indication() function and sends responses back "upstream".
    """
    serviceID: Optional[str]
    serviceElement: Optional[ApplicationServiceElement]
    def __init__(self, sapID: Optional[str] = ...) -> None:
        ...
    
    async def sap_request(self, *args: Any) -> None:
        ...
    
    async def sap_indication(self, *args: Any) -> None:
        ...
    
    async def sap_response(self, *args: Any) -> None:
        ...
    
    async def sap_confirmation(self, *args: Any) -> None:
        ...
    


def bind(*args: Union[Client[T], Server[T], ApplicationServiceElement, ServiceAccessPoint]) -> None:
    """
    Bind a list of clients and servers together, top down.
    """
    ...

