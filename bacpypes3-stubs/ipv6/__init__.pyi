"""
This type stub file was generated by pyright.
"""

import asyncio
import socket
from typing import Any, Callable, List, Optional, Tuple
from ..debugging import bacpypes_debugging
from ..comm import Server
from ..pdu import IPv6Address, PDU

"""
IPv6
"""
_debug = ...
_log = ...
BACPYPES_ENDPOINT_RETRY_INTERVAL = ...
@bacpypes_debugging
class IPv6DatagramProtocol(asyncio.DatagramProtocol):
    _debug: Callable[..., None]
    server: IPv6DatagramServer
    def connection_made(self, transport: asyncio.BaseTransport) -> None:
        ...
    
    def datagram_received(self, data: bytes, addr: Tuple[str, int]) -> None:
        ...
    
    def error_received(self, exc: Exception) -> None:
        ...
    
    def connection_lost(self, exc: Optional[Exception]) -> None:
        ...
    


@bacpypes_debugging
class IPv6DatagramServer(Server[PDU]):
    _debug: Callable[..., None]
    _exception: Callable[..., None]
    _transport_tasks: List[Any]
    interface_index: int
    local_address: Tuple[str, int, int, int]
    transport: Optional[asyncio.DatagramTransport]
    protocol: Optional[IPv6DatagramProtocol]
    def __init__(self, address: IPv6Address) -> None:
        ...
    
    async def retrying_create_datagram_endpoint(self, loop: asyncio.events.AbstractEventLoop, local_socket: socket.socket): # -> tuple[DatagramTransport, IPv6DatagramProtocol]:
        ...
    
    def set_local_transport_protocol(self, address, task): # -> None:
        ...
    
    async def indication(self, pdu: PDU) -> None:
        ...
    
    async def confirmation(self, pdu: PDU) -> None:
        ...
    
    def close(self) -> None:
        ...
    


