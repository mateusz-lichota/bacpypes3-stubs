"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import Any, Callable, List, Optional, Tuple, Union
from ..debugging import bacpypes_debugging
from ..comm import Server
from ..pdu import IPv4Address, LocalBroadcast, PDU

"""
IPv4
"""
_debug = ...
_log = ...
BACPYPES_ENDPOINT_RETRY_INTERVAL = ...

class IPv4DatagramProtocol(asyncio.DatagramProtocol):
    _debug: Callable[..., None]
    server: IPv4DatagramServer
    destination: Union[IPv4Address, LocalBroadcast, None]
    def connection_made(self, transport: asyncio.BaseTransport) -> None: ...
    def datagram_received(self, data: bytes, addr: Tuple[str, int]) -> None: ...
    def error_received(self, exc: Exception) -> None: ...
    def connection_lost(self, exc: Optional[Exception]) -> None: ...

class IPv4DatagramServer(Server[PDU]):
    _debug: Callable[..., None]
    _exception: Callable[..., None]
    _transport_tasks: List[Any]
    local_address: Tuple[str, int]
    local_transport: Optional[asyncio.DatagramTransport]
    local_protocol: Optional[IPv4DatagramProtocol]
    broadcast_address: Optional[Tuple[str, int]]
    broadcast_transport: Optional[asyncio.DatagramTransport]
    broadcast_protocol: Optional[IPv4DatagramProtocol]
    def __init__(self, address: IPv4Address, no_broadcast: bool = ...) -> None: ...
    async def retrying_create_datagram_endpoint(
        self, loop: asyncio.events.AbstractEventLoop, addrTuple: Tuple[str, int]
    ):  # -> tuple[DatagramTransport, IPv4DatagramProtocol]:
        """
        Repeat attempts to create datagram endpoint, sometimes during boot
        the interface isn't ready.  Contributed by PretentiousPotatoPeeler.
        """
        ...

    def set_local_transport_protocol(self, address, task):  # -> None:
        ...
    def set_broadcast_transport_protocol(self, address, task):  # -> None:
        ...
    async def indication(self, pdu: PDU) -> None: ...
    async def confirmation(self, pdu: PDU) -> None: ...
    def close(self) -> None: ...
