"""
This type stub file was generated by pyright.
"""

from typing import Any as _Any, Callable, Never, Optional, Union
from ..apdu import (
    ReadPropertyMultipleRequest,
    ReadPropertyRequest,
    ReadRangeRequest,
    WritePropertyRequest,
)
from ..basetypes import ReadAccessResultElement
from ..constructeddata import Any
from ..debugging import bacpypes_debugging
from ..object import DeviceObject
from ..pdu import Address
from ..primitivedata import ObjectIdentifier, PropertyIdentifier
from ..vendor import VendorInfo
from ..app import DeviceInfoCache

"""
Application Module
"""
_debug = ...
_log = ...

@bacpypes_debugging
class ReadWritePropertyServices:
    _debug: Callable[..., None]
    device_object: Optional[DeviceObject]
    device_info_cache: DeviceInfoCache
    async def read_property(
        self,
        address: Union[Address, str],
        objid: Union[ObjectIdentifier, str],
        prop: Union[PropertyIdentifier, str],
        array_index: Optional[int] = ...,
    ) -> _Any:
        """
        Send a Read Property Request to an address and decode the response,
        returning just the value, or the error, reject, or abort if that
        was received.
        """
        ...

    async def write_property(
        self,
        address: Union[Address, str],
        objid: Union[ObjectIdentifier, str],
        prop: Union[PropertyIdentifier, str],
        value: _Any,
        array_index: Optional[int] = ...,
        priority: Optional[int] = ...,
    ) -> _Any:
        """
        Send a Write Property Request to an address and expect a simple
        acknowledgement.  Return the error, reject, or abort if that
        was received.
        """
        ...

    async def do_ReadPropertyRequest(self, apdu: ReadPropertyRequest) -> None:
        """Return the value of some property of one of our objects."""
        ...

    async def do_WritePropertyRequest(self, apdu: WritePropertyRequest) -> None:
        """Change the value of some property of one of our objects."""
        ...

@bacpypes_debugging
async def read_property_to_any(
    obj: ReadWritePropertyServices,
    propertyIdentifier: PropertyIdentifier,
    propertyArrayIndex: int | None = ...,
) -> Any:
    """Read the specified property of the object, with the optional array index,
    and cast the result into an Any object."""
    ...

@bacpypes_debugging
async def read_property_to_result_element(
    obj: ReadWritePropertyServices,
    propertyIdentifier: PropertyIdentifier,
    propertyArrayIndex: int | None = ...,
) -> ReadAccessResultElement:
    """Read the specified property of the object, with the optional array index,
    and cast the result into an Any object."""
    ...
@bacpypes_debugging
class ReadWritePropertyMultipleServices:
    _debug: Callable[..., None]
    device_object: Optional[DeviceObject]
    device_info_cache: DeviceInfoCache

    async def read_property_multiple(
        self,
        address: Address,
        parameter_list: list[_Any],
        vendor_info: VendorInfo | None = ...,
    ) -> list[tuple[ObjectIdentifier, PropertyIdentifier, Union[int, None], _Any]]: ...
    async def do_ReadPropertyMultipleRequest(
        self, apdu: ReadPropertyMultipleRequest
    ) -> None:
        """Respond to a ReadPropertyMultiple Request."""
        ...

    def do_WritePropertyMultipleRequest(self, apdu: _Any) -> Never:
        """Respond to a WritePropertyMultiple Request."""
        ...

@bacpypes_debugging
class ReadRangeServices:
    _debug: Callable[..., None]
    device_object: Optional[DeviceObject]
    device_info_cache: DeviceInfoCache
    async def read_range(
        self,
        address: Address,
        objid: ObjectIdentifier,
        prop: PropertyIdentifier,
        arr_index: Optional[int] = ...,
        range_params: tuple[str, int, str, str, int] = ...,
    ) -> _Any:
        """
        Send a Read Range Request to an address and decode the response,
        returning the sequence, or the error, reject, or abort if that
        was received.

        :param args: String with <addr> <type> <inst> <prop> [ <indx> ]
        :param range_params: parameters defining how to query the range, a list of five elements
        :returns: data read from device (list of LogRecords)

        range_params: a list of five elements: (range_type: str, first: int, date: str, time: str, count: int)
            range_type: one of ['p', 's', 't']
                        p - RangeByPosition:
                                uses (first, count)
                        s - RangeBySequenceNumber:
                                uses (first, count)
                        t - RangeByTime: Filter by the given time
                                uses (date, time, count)
            first: int, first element when querying by Position or Sequence Number
            date: str, "YYYY-mm-DD" passed to bacpypes.primitivedata.Date constructor
            time: str, "HH:MM:SS" passed to bacpypes.primitivedata.Time constructor
            count: int, number of elements to return, negative numbers reverse direction of search
        """
        ...

    async def do_ReadRangeRequest(self, apdu: ReadRangeRequest) -> None:
        """Return the value of some property of one of our objects."""
        ...
