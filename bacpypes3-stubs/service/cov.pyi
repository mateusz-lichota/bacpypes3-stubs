"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import Any as _Any, Callable, Optional, Tuple
from ..debugging import DebugContents, bacpypes_debugging
from ..pdu import Address
from ..primitivedata import ObjectIdentifier
from ..basetypes import PropertyIdentifier, PropertyValue
from ..apdu import ConfirmedCOVNotificationRequest, UnconfirmedCOVNotificationRequest

"""
Change Of Value Services
"""
_debug = ...
_log = ...

class SubscriptionContextManager:
    _debug: Callable[..., None]
    app: Application
    address: Address
    monitored_object_identifier: ObjectIdentifier
    subscriber_process_identifier: int
    issue_confirmed_notifications: bool
    lifetime: int
    def __init__(
        self,
        app: Application,
        address: Address,
        monitored_object_identifier: ObjectIdentifier,
        subscriber_process_identifier: int,
        issue_confirmed_notifications: bool,
        lifetime: int,
    ) -> None: ...
    async def __aenter__(self) -> SubscriptionContextManager: ...
    async def __aexit__(self, *exc_details):  # -> None:
        """
        Exiting the context, cancel the subscription.
        """
        ...

    async def refresh_subscription(self):  # -> None:
        """
        Send a subscription request.
        """
        ...

    def create_refresh_task(self):  # -> None:
        """
        Create a refresh task.  The `loop.call_later()` function does
        not take a coroutine so this function creates a task wrapping
        the `refresh_subscription()` coroutine.
        """
        ...

    async def put(self, property_value: PropertyValue) -> None:
        """
        Add a property value to that has been received from a notification
        to the queue."""
        ...

    async def get(self) -> PropertyValue:
        """
        Get the next property value from the queue or wait until one
        is available.  See `get_value()` for a specialized version.
        """
        ...

    async def get_value(self) -> Tuple[PropertyIdentifier, _Any]:
        """
        Get the next property value from the queue and interpret the
        propertyValue element to simplify the result.  Note that this
        will drop the property-index and priority elements after the
        interpretation.
        """
        ...

class Subscription(DebugContents):
    _debug_contents = ...
    cancel_handle: Optional[asyncio.TimerHandle]
    def __init__(
        self, obj_ref, client_addr, proc_id, obj_id, confirmed, lifetime, cov_inc
    ) -> None: ...
    def cancel_subscription(self):  # -> None:
        ...
    def renew_subscription(self, lifetime):  # -> None:
        ...

class ChangeOfValueServices:
    def __init__(self) -> None: ...
    def change_of_value(
        self,
        address: Address,
        monitored_object_identifier: ObjectIdentifier,
        subscriber_process_identifier: Optional[int] = ...,
        issue_confirmed_notifications: Optional[bool] = ...,
        lifetime: Optional[int] = ...,
    ) -> SubscriptionContextManager:
        """
        Create and return an async subscription context manager.
        """
        ...

    async def do_ConfirmedCOVNotificationRequest(
        self, apdu: ConfirmedCOVNotificationRequest
    ) -> None: ...
    async def do_UnconfirmedCOVNotificationRequest(
        self, apdu: UnconfirmedCOVNotificationRequest
    ) -> None: ...
    def add_subscription(self, cov):  # -> None:
        ...
    def cancel_subscription(self, cov):  # -> None:
        ...
    def cov_notification(self, cov, apdu):  # -> None:
        """
        Schedule a task to send out a notification related to a COV subscription.
        """
        ...

    def cov_confirmation(self, cov, future) -> None:
        """
        Callback function for sending out notifications.
        """
        ...

    async def do_SubscribeCOVRequest(self, apdu):  # -> None:
        ...
