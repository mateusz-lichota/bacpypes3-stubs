"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import Any, Callable, Dict, List, Optional
from ..debugging import bacpypes_debugging
from ..pdu import Address
from ..primitivedata import CharacterString, ObjectIdentifier
from ..apdu import (
    DeviceCommunicationControlRequest,
    IAmRequest,
    IHaveRequest,
    WhoHasRequest,
    WhoIsRequest,
)
from asyncio import Future

"""
Application Module
"""
_debug = ...
_log = ...
WHO_IS_TIMEOUT = ...
WHO_HAS_TIMEOUT = ...

@bacpypes_debugging
class WhoIsFuture:
    _debug: Callable[..., None]
    low_limit: Optional[int]
    high_limit: Optional[int]
    timeout: Optional[int]
    future: Future[list[IAmRequest]]
    i_ams: Dict[int, IAmRequest]
    only_one: bool
    def __init__(
        self,
        app: WhoIsIAmServices,
        address: Optional[Address],
        low_limit: Optional[int],
        high_limit: Optional[int],
        timeout: Optional[int],
    ) -> None: ...
    def match(self, apdu: IAmRequest) -> None:
        """
        This function is called for each incoming IAmRequest to see if it
        matches the criteria.
        """
        ...

    def who_is_done(self, future: Future[Any]) -> None:
        """The future has been completed or canceled."""
        ...

    def who_is_timeout(self) -> None:
        """The timeout has elapsed, save the I-Am messages we found in the
        future."""
        ...

@bacpypes_debugging
class WhoIsIAmServices:
    _who_is_futures: List[WhoIsFuture]
    def who_is(
        self,
        low_limit: Optional[int] = ...,
        high_limit: Optional[int] = ...,
        address: Optional[Address] = ...,
        timeout: Optional[int] = ...,
    ) -> asyncio.Future[list[IAmRequest]]: ...
    async def do_WhoIsRequest(self, apdu: WhoIsRequest) -> None:
        """Respond to a Who-Is request."""
        ...

    def i_am(self, address: Address = ...) -> None: ...
    async def do_IAmRequest(self, apdu: IAmRequest) -> None:
        """Respond to an I-Am request."""
        ...

@bacpypes_debugging
class WhoHasFuture:
    _debug: Callable[..., None]
    app: WhoHasIHaveServices
    low_limit: Optional[int]
    high_limit: Optional[int]
    object_identifier: Optional[ObjectIdentifier]
    object_name: Optional[CharacterString]
    timeout: Optional[int]
    future: Future[Any]
    i_haves: List[IHaveRequest]
    only_one: bool
    def __init__(
        self,
        app: WhoHasIHaveServices,
        low_limit: Optional[int],
        high_limit: Optional[int],
        object_identifier: Optional[ObjectIdentifier],
        object_name: Optional[CharacterString],
        timeout: Optional[int],
    ) -> None: ...
    def match(self, apdu: IHaveRequest) -> None:
        """
        This function is called for each incoming IHaveRequest to see if it
        matches the criteria.
        """
        ...

    def who_has_done(self, future: Future[Any]) -> None:
        """The future has been completed or canceled."""
        ...

    def who_has_timeout(self) -> None:
        """The timeout has elapsed, save the I-Am messages we found in the
        future."""
        ...

@bacpypes_debugging
class WhoHasIHaveServices:
    _debug: Callable[..., None]
    _who_has_futures: List[WhoHasFuture]
    def who_has(
        self,
        low_limit: Optional[int] = ...,
        high_limit: Optional[int] = ...,
        object_identifier: Optional[ObjectIdentifier] = ...,
        object_name: Optional[CharacterString] = ...,
        address: Address = ...,
        timeout: Optional[int] = ...,
    ) -> Future[Any]: ...
    async def do_WhoHasRequest(self, apdu: WhoHasRequest) -> None:
        """Respond to a Who-Has request."""
        ...

    def i_have(
        self,
        object_identifier: ObjectIdentifier,
        object_name: CharacterString,
        address: Address = ...,
    ) -> None: ...
    async def do_IHaveRequest(self, apdu: IHaveRequest) -> None:
        """Respond to a I-Have request."""
        ...

@bacpypes_debugging
class DeviceCommunicationControlServices:
    _dcc_enable_handle: Optional[asyncio.TimerHandle] = ...
    async def do_DeviceCommunicationControlRequest(
        self, apdu: DeviceCommunicationControlRequest
    ) -> None: ...
    def enable_communications(self) -> None: ...
    def disable_communications(self, enable_disable: Any) -> None: ...
