"""
This type stub file was generated by pyright.
"""

from typing import Optional
from rdflib import Graph, Literal, URIRef
from ..debugging import bacpypes_debugging
from ..primitivedata import Atomic
from ..constructeddata import ExtendedList, Sequence

"""
Utility functions
"""
_debug = ...
_log = ...
BACnetNS = ...
_unupper_re = ...
_wordsplit_re = ...

def attr_to_predicate(k: str):
    """
    Given an attribute name return its URI.
    """
    ...

_bitstring_as_bits = ...
_bitstring_as_str = ...
_bitstring_as_list = ...
_enumerated_as_str = ...
_enumerated_as_uri = ...
_enumerated_as_datatype = ...
_octetstring_as_base64Binary = ...
_octetstring_as_hexBinary = ...

def null_encode(graph: Graph, value): ...
def null_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def boolean_encode(graph: Graph, value): ...
def boolean_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def unsigned_encode(graph: Graph, value): ...
def unsigned_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def integer_encode(graph: Graph, value): ...
def integer_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def real_encode(graph: Graph, value): ...
def real_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def double_encode(graph: Graph, value): ...
def double_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def octetstring_encode(graph: Graph, value): ...
def octetstring_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def characterstring_encode(graph: Graph, value): ...
def characterstring_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def bitstring_encode(graph: Graph, value): ...
def bitstring_decode(graph: Graph, value, class_): ...
def enumerated_encode(graph: Graph, value): ...
def enumerated_decode(graph: Graph, value, class_): ...
def date_encode(graph: Graph, value): ...
def date_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def time_encode(graph: Graph, value): ...
def time_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def objectidentifier_encode(graph: Graph, value): ...
def objectidentifier_decode(graph: Graph, value):  # -> ElementMetaclass | Element:
    ...
def datetime_encode(graph: Graph, value): ...
def datetime_decode(graph: Graph, value):  # -> Sequence:
    ...
def atomic_encode(graph: Graph, value) -> Literal: ...
def atomic_decode(graph: Graph, literal, class_) -> Atomic: ...
def sequence_to_graph(
    seq: Sequence, node: URIRef, graph: Optional[Graph] = ...
) -> Graph:
    """Encode a sequence as a graph."""
    ...

def graph_to_sequence(graph: Graph, node: URIRef, seq_class: type) -> Sequence:
    """Decode a sequence from a graph."""
    ...

def extendedlist_to_graph(
    xlist: ExtendedList,
    subject: URIRef,
    predicate: URIRef,
    graph: Optional[Graph] = ...,
) -> Graph:
    """Encode an extended list as a graph."""
    ...

def graph_to_extendedlist(
    graph: Graph, subject: URIRef, predicate: URIRef, xlist_class: type
) -> ExtendedList:
    """Decode an extended list from a graph."""
    ...
