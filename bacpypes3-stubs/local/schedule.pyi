"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import Any, Optional, Tuple
from ..debugging import bacpypes_debugging
from ..primitivedata import Date, Time
from ..basetypes import CalendarEntry, WeekNDay
from ..object import ScheduleObject as _ScheduleObject
from .object import Object as _Object

_debug = ...
_log = ...

def match_date(date: Date, date_pattern: Date) -> bool:
    """
    Match a specific date, a four-tuple with no special values, with a date
    pattern, four-tuple possibly having special values.
    """
    ...

def match_date_range(date: Date, date_range: Date) -> bool:
    """
    Match a specific date, a four-tuple with no special values, with a DateRange
    object which as a start date and end date.
    """
    ...

def match_weeknday(date: Date, weeknday: WeekNDay) -> bool:
    """
    Match a specific date, a four-tuple with no special values, with a
    BACnetWeekNDay, an octet string with three (unsigned) octets.
    """
    ...

def date_in_calendar_entry(date: Date, calendar_entry: CalendarEntry) -> bool: ...
def datetime_to_time(date: Date, time: Time) -> float:
    """
    Take the date and time 4-tuples and return the time in seconds since
    the epoch as a floating point number.
    """
    ...

class ScheduleObject(_Object, _ScheduleObject):
    _interpret_schedule_handle: Optional[asyncio.Handle]
    def __init__(self, **kwargs) -> None: ...
    def check_reliability(self, old_value=..., new_value=...):
        """
        This function is called when the object is created and after
        one of its configuration properties has changed.  The new and old value
        parameters are ignored, this is called after the property has been
        changed and this is only concerned with the current value.
        """
        ...

    def present_value_changed(self, old_value, new_value):  # -> None:
        """
        This function is called when the presentValue of the local schedule
        object has changed, both internally by this interpreter, or externally
        by some client using WriteProperty.
        """
        ...

    def schedule_changed(self, old_value, new_value):  # -> None:
        """
        This function is called when the weeklySchedule or the exceptionSchedule
        property of the local schedule object has changed, both internally by
        this interpreter, or externally by some client using WriteProperty.
        """
        ...

    def interpret_schedule(self):  # -> None:
        ...
    def eval(self, edate: Date, etime: Time) -> Optional[Tuple[Any, Any]]:
        """
        Evaluate the schedule according to the provided date and time and
        return the appropriate present value with the time of the next
        transition, or None if not in the effective
        period.
        """
        ...
