"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import Any as _Any, Callable, Dict, Optional, Tuple
from ..debugging import DebugContents, bacpypes_debugging
from ..primitivedata import (
    Atomic,
    BitString,
    Boolean,
    CharacterString,
    Double,
    Integer,
    Real,
    Unsigned,
)
from ..basetypes import (
    DateTime,
    DeviceObjectPropertyReference,
    EventState,
    EventTransitionBits,
    EventType,
    LimitEnable,
    NotificationParameters,
    OptionalCharacterString,
    Reliability,
    SequenceOfEventParameterExtendedParameters,
    StatusFlags,
    TimerState,
    TimerTransition,
)
from ..constructeddata import Any, ListOf
from ..object import EventEnrollmentObject as _EventEnrollmentObject
from .object import Algorithm, Object
from .fault import FaultAlgorithm

"""
Event
"""
_debug = ...
_log = ...

class EventAlgorithm(Algorithm, DebugContents):
    _debug: Callable[..., None]
    _debug_contents: Tuple[str, ...] = ...
    event_type: EventType = ...
    monitored_object: Object
    monitoring_object: Optional[EventEnrollmentObject]
    fault_algorithm: Optional[FaultAlgorithm]
    pCurrentState: EventState
    pCurrentReliability: Reliability
    pEventDetectionEnable: Boolean
    pEventAlgorithmInhibit: Boolean
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    pNotificationClass: Unsigned
    pEventEnable: EventTransitionBits
    pAckedTransitions: EventTransitionBits
    _current_state: Optional[EventState]
    _transition_state: Optional[EventState]
    _transition_timeout_handle: Optional[asyncio.Handle]
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def bind(self, **kwargs):  # -> None:
        ...
    def execute(self):
        """
        Using the bound parameters, determine if there should be a change in the
        event state.  This should be an @abstractmethod at some point.
        """
        ...

    def state_transition_delayed(self) -> None:
        """
        This method is called when pTimeDelay and/or pTimeDelayNormal is
        provided and the transition delay has passed.
        """
        ...

    def state_transition_cancel(self) -> None:
        """
        This method is called to cancel a transition that has been scheduled.
        """
        ...

    def state_transition(
        self, new_state: Optional[EventState], immediate: bool = ...
    ) -> None:
        """
        Request a transition to a new state, or new_state is None then the
        current state is acceptable.
        """
        ...

    async def send_notifications(
        self, notification_parameters: Dict[str, _Any]
    ) -> None: ...
    def fault_notification_parameters(self) -> NotificationParameters:
        """
        Return a dictionary of the parameters to the confirmed and unconfirmed
        event notification services.  The eventValues (of type NotificationParameters)
        for to/from fault states are dependent on the monitored object type.
        """
        ...

    def event_notification_parameters(self) -> NotificationParameters:
        """
        Return the notification parameters for to/from offnormal states which
        are dependent on the event detection algorithm.  This should be an
        @abstractmethod at some point.
        """
        ...

class ChangeOfBitstringEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.1
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: BitString
    pStatusFlags: StatusFlags
    pAlarmValues: ListOf(BitString)
    pBitmask: BitString
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class ChangeOfStateEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.2
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: Atomic
    pStatusFlags: StatusFlags
    pAlarmValues: ListOf(Atomic)
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self):  # -> None:
        ...
    def event_notification_parameters(self) -> NotificationParameters:
        """
        Return the notification parameters for to/from offnormal states.
        """
        ...

class ChangeOfValueEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.2
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: BitString
    pStatusFlags: StatusFlags
    pIncrement: Real
    pBitmask: BitString
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class CommandFailureEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.4
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: BitString
    pStatusFlags: StatusFlags
    pFeedbackValue: Any
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class FloatingLimitEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.5
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: BitString
    pStatusFlags: StatusFlags
    pSetpoint: Real
    pLowDiffLimit: Real
    pHighDiffLimit: Real
    pDeadband: Real
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class OutOfRangeEventAlgorithm(EventAlgorithm, DebugContents):
    """
    Clause 13.3.6
    """

    _debug: Callable[..., None]
    _debug_contents: Tuple[str, ...] = ...
    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: BitString
    pStatusFlags: StatusFlags
    pLowLimit: Real
    pHighLimit: Real
    pDeadband: Real
    pLimitEnable: LimitEnable
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def init(self):  # -> None:
        ...
    def execute(self):  # -> None:
        ...
    def event_notification_parameters(self) -> NotificationParameters:
        """
        Return the notification parameters for to/from offnormal states.
        """
        ...

class BufferReadyEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.7
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: BitString
    pLogBuffer: DeviceObjectPropertyReference
    pThreshold: Unsigned
    pPreviousCount: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class UnsignedRangeEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.9
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: BitString
    pStatusFlags: StatusFlags
    pLowLimit: Unsigned
    pHighLimit: Unsigned
    pLimitEnable: LimitEnable
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class ExtendedEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.10
    """

    event_type = ...
    pCurrentState: EventState
    pVendorId: Unsigned
    pEventType: Unsigned
    pParameters: SequenceOfEventParameterExtendedParameters
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class ChangeOfStatusFlags(EventAlgorithm):
    """
    Clause 13.3.11
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: StatusFlags
    pSelectedFlags: StatusFlags
    pPresentValue: Any
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class AccessEventEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.12
    """

    event_type = ...
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...

class DoubleOutOfRangeEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.13
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: Double
    pStatusFlags: StatusFlags
    pLowLimit: Double
    pHighLimit: Double
    pDeadband: Double
    pLimitEnable: LimitEnable
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class SignedOutOfRangeEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.13
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: Integer
    pStatusFlags: StatusFlags
    pLowLimit: Integer
    pHighLimit: Integer
    pDeadband: Unsigned
    pLimitEnable: LimitEnable
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class UnsignedOutOfRangeEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.15
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: Unsigned
    pStatusFlags: StatusFlags
    pLowLimit: Unsigned
    pHighLimit: Unsigned
    pDeadband: Unsigned
    pLimitEnable: LimitEnable
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class ChangeOfCharacterStringEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.16
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: CharacterString
    pStatusFlags: StatusFlags
    pAlarmValues: ListOf(OptionalCharacterString)
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class NoneEventEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.17

    Used when only fault detection is in use by an object.  The Event
    Enrollment object evaluates reliability only and does not apply an event
    algorithm.
    """

    event_type = ...
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self):  # -> None:
        ...

class ChangeOfDiscreteValueEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.18
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: CharacterString
    pStatusFlags: StatusFlags
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class ChangeOfTimerEventAlgorithm(EventAlgorithm):
    """
    Clause 13.3.19
    """

    event_type = ...
    pCurrentState: EventState
    pMonitoredValue: TimerState
    pStatusFlags: StatusFlags
    pUpdateTime: DateTime
    pLastStateChange: TimerTransition
    pInitialTimeout: Unsigned
    pExpirationTime: DateTime
    pAlarmValues: ListOf(TimerState)
    pTimeDelay: Unsigned
    pTimeDelayNormal: Unsigned
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self): ...

class EventEnrollmentObject(Object, _EventEnrollmentObject):
    """ """

    _debug: Callable[..., None]
    _event_algorithm: EventAlgorithm
    _fault_algorithm: FaultAlgorithm
    _monitored_object: Object
    __reliability: Reliability = ...
    def __init__(self, **kwargs) -> None: ...
    @property
    def reliability(self) -> Reliability:
        """Return the reliability of the object, Clause 12.12.21."""
        ...

    @reliability.setter
    def reliability(self, value: Reliability) -> None:
        """
        Change the reliability of this object.
        """
        ...
