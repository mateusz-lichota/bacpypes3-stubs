"""
This type stub file was generated by pyright.
"""

from typing import Callable, List, Optional, Tuple, Union
from ..debugging import DebugContents, bacpypes_debugging
from ..primitivedata import Boolean, CharacterString, Double, Integer, Real, Unsigned
from ..constructeddata import ListOf
from ..basetypes import (
    OptionalCharacterString,
    Reliability,
    SequenceOfFaultParameterExtendedParameters,
)
from ..object import EventEnrollmentObject, Object
from .object import Algorithm

"""
Fault
"""
_debug = ...
_log = ...

class FaultAlgorithm(Algorithm, DebugContents):
    _debug: Callable[..., None]
    _debug_contents: Tuple[str, ...] = ...
    monitored_object: Object
    monitoring_object: Optional[EventEnrollmentObject]
    evaluated_reliability: Optional[Reliability]
    pCurrentReliability: Reliability
    pReliabilityEvaluationInhibit: Boolean
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def bind(self, **kwargs):  # -> None:
        ...
    def init(self):  # -> None:
        """
        This is called after the `bind()` call and after all of the parameter
        initialization tasks have completed.
        """
        ...

    def execute(self) -> Optional[Reliability]:
        """
        Using the bound parameters, determine if there should be a change in the
        reliability by providing a value to evaluated_reliability, for no
        transition leave it None.  This should be an @abstractmethod at some
        point.
        """
        ...

class NoneFaultAlgorithm(FaultAlgorithm):
    """
    Clause 13.4.1

    This is a placeholder for the case where no fault algorithm is applied by
    the object.
    """
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self) -> Optional[Reliability]: ...

class CharacterStringFaultAlgorithm(FaultAlgorithm):
    """
    Clause 13.4.2
    """

    _debug: Callable[..., None]
    _debug_contents: Tuple[str, ...] = ...
    pMonitoredValue: CharacterString
    pFaultValues: ListOf(OptionalCharacterString)
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self) -> Optional[Reliability]: ...

class ExtendedFaultAlgorithm(FaultAlgorithm):
    """
    Clause 13.4.3
    """

    _debug_contents: Tuple[str, ...] = ...
    pVendorId: Unsigned
    pFaultType: Unsigned
    pParameters: SequenceOfFaultParameterExtendedParameters
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self) -> Optional[Reliability]: ...

class StateFaultAlgorithm(FaultAlgorithm):
    """
    Clause 13.4.5
    """
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self) -> Optional[Reliability]: ...

class StatusFlagsFaultAlgorithm(FaultAlgorithm):
    """
    Clause 13.4.6
    """
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self) -> Optional[Reliability]: ...

class OutOfRangeFaultAlgorithm(FaultAlgorithm, DebugContents):
    """
    Clause 13.4.7
    """

    _debug: Callable[..., None]
    _debug_contents: Tuple[str, ...] = ...
    pMinimumNormalValue: Union[Real, Unsigned, Double, Integer]
    pMaximumNormalValue: Union[Real, Unsigned, Double, Integer]
    pMonitoredValue: Union[Real, Unsigned, Double, Integer]
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def init(self):  # -> None:
        ...
    def execute(self) -> Optional[Reliability]: ...

class FaultListedFaultAlgorithm(FaultAlgorithm):
    """
    Clause 13.4.8
    """

    pMonitoredList: List
    def __init__(
        self,
        monitoring_object: Optional[EventEnrollmentObject],
        monitored_object: Object,
    ) -> None: ...
    def execute(self) -> Optional[Reliability]: ...
