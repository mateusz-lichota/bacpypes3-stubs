"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import Callable, List, Optional, Tuple
from .debugging import DebugContents, bacpypes_debugging
from .comm import Client, ServiceAccessPoint
from .pdu import Address, PDU
from .apdu import APDU

"""
Application Layer
"""
_debug = ...
_log = ...
IDLE = ...
SEGMENTED_REQUEST = ...
AWAIT_CONFIRMATION = ...
AWAIT_RESPONSE = ...
SEGMENTED_RESPONSE = ...
SEGMENTED_CONFIRMATION = ...
COMPLETED = ...
ABORTED = ...

class SSM(DebugContents):
    transactionLabels = ...
    _debug: Callable[..., None]
    _exception: Callable[..., None]
    _debug_contents: Tuple[str, ...] = ...
    invokeID: Optional[int]
    _timer_handle: Optional[asyncio.Handle]
    segmentState: int
    segmentAPDU: Optional[APDU]
    segmentSize: Optional[int]
    segmentCount: Optional[int]
    retryCount: Optional[int]
    segmentRetryCount: Optional[int]
    sentAllSegments: Optional[bool]
    lastSequenceNumber: Optional[int]
    initialSequenceNumber: Optional[int]
    actualWindowSize: Optional[int]
    def __init__(
        self, sap: ApplicationServiceAccessPoint, pdu_address: Address
    ) -> None:
        """Common parts for client and server segmentation."""
        ...

    def start_timer(self, msecs: int) -> None: ...
    def stop_timer(self) -> None: ...
    def restart_timer(self, msecs: int) -> None: ...
    def timer_expired(self) -> None:
        """
        This function is called when the timer expires and must be overridden
        by a subclass.
        """
        ...

    def set_state(self, newState, msecs: int = ...) -> None:
        """
        This function is called when the derived class wants to change state
        and optionally start a timer.
        """
        ...

    def set_segmentation_context(self, apdu: APDU) -> None:
        """This function is called to set the segmentation context."""
        ...

    def get_segment(self, indx: int) -> APDU:
        """
        This function returns an APDU coorisponding to a particular
        segment of a confirmed request or complex ack.  The segmentAPDU
        is the context.
        """
        ...

    def append_segment(self, apdu: APDU) -> None:
        """
        This function appends the apdu content to the end of the current
        APDU being built.  The segmentAPDU is the context.
        """
        ...

    def in_window(self, seqA: int, seqB: int) -> bool: ...
    async def fill_window(self, seqNum: int) -> None:
        """This function sends all of the packets necessary to fill
        out the segmentation window."""
        ...

class ClientSSM(SSM):
    _debug: Callable[..., None]
    def __init__(self, sap: ApplicationServiceAccessPoint, pdu_address) -> None: ...
    def set_state(self, newState: int, timer: int = ...) -> None:
        """This function is called when the client wants to change state."""
        ...

    async def request(self, apdu: APDU) -> None:
        """This function is called by client transaction functions when it wants
        to send a message to the device."""
        ...

    async def indication(self, apdu: APDU) -> None:
        """This function is called after the device has bound a new transaction
        and wants to start the process rolling."""
        ...

    async def response(self, apdu):  # -> None:
        """This function is called by client transaction functions when they want
        to send a message to the application."""
        ...

    async def confirmation(self, apdu):  # -> None:
        """This function is called by the device for all upstream messages related
        to the transaction."""
        ...

    def timer_expired(self):  # -> None:
        """
        This function is called when something has taken too long.
        """
        ...

    def abort(self, reason):  # -> AbortPDU:
        """This function is called when the transaction should be aborted."""
        ...

    async def segmented_request(self, apdu):  # -> None:
        """This function is called when the client is sending a segmented request
        and receives an apdu."""
        ...

    async def segmented_request_timeout(self):  # -> None:
        ...
    async def await_confirmation(self, apdu):  # -> None:
        ...
    async def await_confirmation_timeout(self):  # -> None:
        ...
    async def segmented_confirmation(self, apdu):  # -> None:
        ...
    async def segmented_confirmation_timeout(self):  # -> None:
        ...

class ServerSSM(SSM):
    _debug: Callable[..., None]
    def __init__(self, sap, pdu_address) -> None: ...
    def set_state(self, newState, timer=...):  # -> None:
        """This function is called when the client wants to change state."""
        ...

    async def request(self, apdu):  # -> None:
        """This function is called by transaction functions to send
        to the application."""
        ...

    async def indication(self, apdu):  # -> None:
        """This function is called for each downstream packet related to
        the transaction."""
        ...

    async def response(self, apdu):  # -> None:
        """This function is called by transaction functions when they want
        to send a message to the device."""
        ...

    async def confirmation(self, apdu):  # -> None:
        """This function is called when the application has provided a response
        and needs it to be sent to the client."""
        ...

    def timer_expired(self):  # -> None:
        """
        This function is called when the client has failed to send all of the
        segments of a segmented request, the application has taken too long to
        complete the request, or the client failed to ack the segments of a
        segmented response.
        """
        ...

    def abort(self, reason):  # -> AbortPDU:
        """This function is called when the application would like to abort the
        transaction.  There is no notification back to the application."""
        ...

    async def idle(self, apdu):  # -> None:
        ...
    async def segmented_request(self, apdu):  # -> None:
        ...
    async def segmented_request_timeout(self):  # -> None:
        ...
    async def await_response(self, apdu):  # -> None:
        ...
    async def await_response_timeout(self):  # -> None:
        """This function is called when the application has taken too long
        to respond to a clients request.  The client has probably long since
        given up."""
        ...

    async def segmented_response(self, apdu):  # -> None:
        ...
    async def segmented_response_timeout(self):  # -> None:
        ...

class ApplicationServiceAccessPoint(Client[PDU], ServiceAccessPoint):
    _debug: Callable[..., None]
    clientTransactions: List[ClientSSM]
    serverTransactions: List[ServerSSM]
    def __init__(
        self, device_object=..., device_info_cache=..., sap=..., cid=...
    ) -> None: ...
    async def request(self, apdu: APDU) -> None:
        """
        Packets going down the stack are APDUs but to be delivered to the
        network layer they need to be encoded as generic PDUs first.
        """
        ...

    async def confirmation(self, pdu: PDU) -> None:
        """
        Packets coming up the stack are PDUs.  First decode them as one
        of the generic APDUs.  If it is an unconfirmed request deliver it
        directly to the application, otherwise it may associated with an
        existing client or server segmentation state machine, or if it is
        a new incoming request, make a new ServerSSM to track it.
        """
        ...

    async def sap_indication(self, apdu: APDU) -> None:
        """
        This function is called when the application is requesting a new
        transaction as a client.
        """
        ...

    async def sap_response(self, apdu: APDU) -> None:
        """
        This function is called when the state machine has finished with
        a transaction and is sending the results back to the client.
        """
        ...

    async def sap_confirmation(self, apdu: APDU) -> None:
        """
        This function is called when the application is responding to a request,
        the apdu may be a simple ack, complex ack, error, reject or abort.
        """
        ...
